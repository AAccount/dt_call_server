db
	users: name*, passwd hash

server
	class
		user: name, socket, status
	api ??user token??
		login: name, passwd (<--)
		call: from, to (<--)
		resp: api(login, call), status (-->)
		call request: from (-->)
		call response: from, to (<--)
		call end: from (<--)
		call end: status (-->)
		logout:
		lookup: name
	main
		command, media port
		listen on command port

		login api (uname, passwd)
		lookup db and send resp
		if success
			send success resp
			create user object
			create sockets (media, command) from client to user object
			insert into hash table of clients
		if fail
			send fail resp

		make a call
			<-- call request (??from??, to)
			check hash table for obj existence
			if exist
				--> call request (from)
				<-- call response (to)
				connect 2 callers's media sockets
				-->*2 call start
			if not exist or rejected or timeout or in call or sockets broken
				send call request fail resp
				on sockets broken remove from hash table
			<-- call end
			-->*2 call stop
			disconnect media sockets

		logout
			remove object from hash table

		lookup
			<-- lookup by name request
			--> true/false resp

	client
		login
			send login to server command port
			read response: on success next screen, on fail generic error
			load contacts from app db
			if empty ??lookup suggestion??
			
general: associate socket fd with obj: hash table fd --> obj
intead of connecting 2 sockets. call = 2 way table
	when person1's media socket receives X bytes send it to person 2
	person 2 determinted by 2 way call table
	timestamp all commands to prevent replay
	protobuf
	verify host certificate against locally stored copy
